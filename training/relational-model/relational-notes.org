#+TITLE: The Relational Model
#+AUTHOR: James Geddes
#+DATE: 27 November 2017

#+SETUPFILE: theme-readtheorg.setup

#+HTML_DOCTYPE: html5

# html-style:nil 
#+OPTIONS: html5-fancy:t 

# #+HTML_HEAD: <link rel="stylesheet" href="tufte.css">

#+startup: showall

* Introduction

** What is data?

#+BEGIN_quote
Question 1: What is data?
#+END_quote

# Facts?
# Objects?
# Triples?
# Pointers?
# Documents?
# Hierarchies?

# The relational model is interested in modelling /facts/. 

** What level are we going to talk about?

# Hand-drawn figure on the whiteboard here

From abstract to concrete:

1. The *conceptual* model is the mathematics of facts: it is expressed using
   set-theoretic notions.

2. The *logical* model describes how the conceptual model is represented and
   manipulated by a computer. It is the level of SQL, the language with which
   you interact with the database.

3. The *physical* model is the “back-end”: it describes how the bits are
   organised within a computer, how your commands are understood and compiled,
   and the mechanics of computation on data. 

We will talk exclusively about the conceptual and logical levels. The main
challenge in this subject is that very few existing database systems correctly
implement the conceptual model.

** Challenges

- Most database systems incorrectly implement the conceptual level 
- Most practitioners know only the logical level
- Much real-world code drags in the physical level where it doesn't belong


* The conceptual model

** Example A: House Prices

Look at [[file:data/median-house-price-by-lad.csv]]

#+begin_quote
Question 2: What does this data look like?

- What kind of structure is this?
- What regularities can you see?
- What anomalies are there?
- Would you make any structural changes?
#+end_quote

# Anomalies include: nulls, blanks, ...
# Oddities include: redundant data (percentages)
# Structural oddities include: columns that should be values

** An informal description of a table

1. The data is written as a /table/, which consists of a /header/ and a sequence
   /rows/. 

2. All the rows have the same structure, as determined by the header: a row is
   a sequence of values; and the type of each value is determined by the header.

The next section is a formal version of that specfication. Very few real-world
databases correctly follow this formal version but it is nonetheless helpful to
have it in mind.

The relational model represents facts, of a certain sort. The sort of facts it
represents are those of the form $P(x, y, \dots, z)$ where $P$ is a /predicate/,
ie, either true of false depending on the values asigned to the \(x, y, \dots
z\).

/Example/: Looking at our example table, $H(d, n, p_1, p_2)$ might represent the
proposition “the regional district $d$ has name $n$, and an average house price
in 1996 of $p_1$ and in 2009 of $p_2$.”

/Example/: $P(f, l)$ might mean “there exists a person having first name $f$ and
last name $l$.”

A relational database represents these facts by explicitly storing the
/extension/ of such a $P$; that is, the set of all values of \(x, y, \dots z\)
that make the predicate true. For any other values, the proposition is assumed
to be false. 

The /closed-world assumption:/ If some tuple is not in the database, then the
corresponding proposition if fasle. The closed-world assumption is frequently
violated in real-world databases.


** Formal definition of a relation

The following translation is not exact:

| Conceptual | Logical       | Comment           |
|------------+---------------+-------------------|
| Domain     | Type          |                   |
| Attribute  | Column header |                   |
| Header     | Header        |                   |
| Relation   | Table         | /Header and rows/ |
| Body       | Body          | /Set of rows/     |
| Tuple      | Row           |                   |
| Value      | Field, value  |                   |


A /domain/ is a finite (!) set. All “values” in the relational model are
elements of some particular domain.

We assume the existence of some set of possible “names”. (These are usually
strings satisfying restrictions that make them suitable for computer variables
names.)

An /attribute/ is a pair, consisting of a name and a domain.

A /header/ is a finite set (possibly empty) of attributes, such that all the
names are unique.

A /relation/ is a header, together with a subset of the cartesian product of all
the domains in the header. This subset is called the /body/ of the relation. An
element of the body is called a /tuple/. 

Thus a tuple is, for every attribute in the header, a value in the domain of
that attribute.


#+begin_quote
Question 3: About relations

1. From the *definition* of relation:
   - Does order of tuples matter?
   - Does order of attributes matter? 
   - Is every tuple unique?

2. Is the example dataset a relation? If not, why not?

3. How many relations have *no* attributes? What is/are they? Why would you use
   them?

4. Is it possible for a value to be ~NULL~ or “missing”?
#+end_quote

The point of relations is that they represent collections of facts. The idea of
the /relational algebra/ is to combine one or more relations to produce another
relation. 

#+begin_quote
Question 4: About an algebra of relations

5. What kinds of operation can you imagine on a single relation?

6. What kinds of operation can you imagine on one or more relations?
#+end_quote

# Some ideas for operations:
# - projection onto attributes
# - restriction onto rows (satisfying some other predicate)
# - set union / intersection / difference of bodies
# - divide

** Operations on relations

This is the /relational algebra/. 

It's called an algebra because all the operations produce a relation.


* SQL and the logical model: Getting data out of databases


In real-world datasets, we often have the following:

- Rows are not unique
- Column (or row) ordering matters
- Some values are missing or ~NULL~
  
** Example B: the "survey" database

#+begin_quote
Question 5: Using the database

1. Run sqlite (eg, type ~sqlite3 survey.db~ at the command line)

2. Try ~.help~ (note the dot!)

3. Try:
   + ~.databases~
   + ~.tables~
   + ~.schema~

4. Set the display mode:
  + ~.mode column~
  + ~.headers on~
#+end_quote

** SQL: The language of the relational algebra

There is an SQL standard, but particular products may or may not adhere to it
perfectly. The [[https://sqlite.org/lang_select.html][sqlite website]] documents the particular syntax understood by
sqlite.


*** Single-table queries

#+BEGIN_SRC sql
SELECT col-expr [AS name], ... 
FROM tbl
[ WHERE expr ] 
[ GROUP BY col-expr, ... [ HAVING expr ]];
#+END_SRC

Here ~col-expr~ is either the name of a column (eg, ~id~), or an arithmetic (or
string, or date, ...)  expression (eg, ~reading / 1000~), or an aggregation (eg,
~sum(reading)~).

Note that the result is always a table.

#+begin_quote
Question 6: Selecting, computing, and grouping

0. Try: ~SELECT * FROM Person;~ (This is a special syntax.)

1. Select the identifier and the first name from the ~Person~ table.

2. As (2) but rename the first name as ~first_name~.

3. Select the first and last dates from ~Visited~. (Hint: there are functions
   ~max()~ and ~min()~ which also work on dates.)

4. How many readings in total were made by each scientist? (Hint: there's a
   function ~count()~ which counts rows; you can say ~count(*)~.)

5. Will sqlite ever return a table with duplicate rows? If it does, how do you
   get it to return only unique rows?

6. What's the average temperature recorded across all sites and dates by all
   scientists?

7. What's the average reading for each kind of measurement?
#+end_quote

*** Multiple table queries

Union, Intersection, Difference:

#+BEGIN_SRC sql
tbl-expr 
[UNION | INTERSECT | EXCEPT] 
tbl-expr;
#+END_SRC

Joins:

#+BEGIN_SRC sql
SELECT tbl1.col, ... 
FROM tbl-expr [AS tlb1] JOIN tbl-exp [AS tbl2] ...
[ ON tbl1.col = tbl2.col [ AND ... ] ]
#+END_SRC

Here ~tbl-expr~ is a table or another “~SELECT ...~” that produces a table. In
the latter case, you might need to rename it with ~AS~. 

/Example/: here is every visit to every site:

#+BEGIN_SRC sql
SELECT Site.name, Site.lat, Site.long, Visited.id, Visited.dated 
FROM Site JOIN Visited
ON Site.name = Visited.site;
#+END_SRC

#+begin_quote
Question 7: Multiple-table queries

1. Which scientists visited which sites?

2. What's the average (hint: ~avg()~) temperature recorded for each site across
   all visits?

3. For each kind of measurement, which site recorded the highest value of that
   measurement?

4. What does ~SELECT 12 as N;~ do?

5. What on earth is this (and why is there an off-by-one error)?:

  #+begin_src sql
  WITH nmbrs AS 
    (SELECT 1 as N
     UNION 
     SELECT N + 1 FROM nmbrs 
     WHERE N < 10) 
   SELECT * FROM nmbrs;
  #+end_src

#+end_quote


* Data modelling: Getting data into databases 

** NULLs

~NULL~ s are not great. They often arise because a “proper” table has been
“pivoted” so that the values of one column have become column headers.

#+begin_quote
Question 8:

Look at the example [[./data/median-house-price-by-lad.csv]]. Does it have nulls?
Why?

Use Excel (or equivalent) to create a version without nulls. 
#+end_quote 


** Normalisation of tables

In this section, we talk about the real world that is represented by tables. In
the real-world there are often restrictions on the tuples (that is, rows) that
/could/, in principle, occur in a relation. 

“Normal forms” describe ways in which relations and databases avoid containing
redundant information and conforming to the real-world restrictions.

Frustratingly, there are many normal forms. Specifically, there is first,
second, third, fourth, and fifth normal form, plus two others. I shall describe
the two others.


#+begin_quote
Question 9: Look at the example house-prices table (the original or your new
version). 

1. Is there any subset of columns that uniquely identifies -- in
principle -- each row?

2. What is the smallest subset that does so? 

3. Are there any others?
#+end_quote

A /candidate key/ is a set of attributes such that:

 1. the values of the attributes in a tuple uniquely determine the tuple; and
 2. no smaller subset of attributes suffices to do so;

A /superkey/ is some superset of the attributes of a /candidate key/.

*Note:* Some people say /key/ for candidate key, some people use /key/ to mean
superkey. 

Sometimes some set of values in a table depends on some other values. Suppose
$A$ is a set of attributes, and $K$ some other set of attributes. 

If $K$ is a candidate key, then the values in $A$ must depend entirely upon $K$,
becuase the whole tuple does. The following defition goes the other way:

A relation is in /Boyce-Codd normal form/ if, whenever, for any legal tuple, the
values of $A$ are determined entirely by the values of $K$, then $K$ is a
superkey.

#+begin_quote
Question 10: Boyce-Codd normal form.

1. Is the original house-price table in Boyce-Codd normal form? 

2. Is your version without nulls in Boyce-Codd normal form? If not, fix it so
   that it is. (This may require splitting it into more than one table.)

Note: If you like, you can stick with Excel here (or R, or Python). Just make sure you
have a nice copy of your final relations that you can save as a csv.
#+end_quote

Example C: Open up [[file:data/household-income-by-msoa.csv]]

#+begin_quote
Question 11: More normalisation

1. Is this table in Boyce-Codd normal form? If not, fix it so that it is.
#+end_quote

** Normalisation of databases

Sometimes tables are obviously connected to each other.

A /foreign key/ is a set of attributes that is a candidate key in some other
table. Usually, when we identify foreign keys, we also mean to assert that every
tuple from a table with a foreign key has that corresponding tuple actually
present in the other table. This is called /referential integrity/.

#+begin_quote 
Question 12: Look at the collection of tables you have built. In
which tables are there foriegn keys?
#+end_quote

A relation is in /Domain-Key normal form/ if every real-world restriction is a
consequence of the definitions of keys and domains.

** Building a database 

#+begin_quote
Question 13: The last exercise

1. Build an sqlite database from the tables you have constructed. Use the DB
   manager application. (Most RDBMS don't let you play fast and loose with types
   and schema -- sqlite does.)

2. What is the average house price in 2009 by Government Office Region?

3. For each GOR, what is its percentage increase in house-price:income
   ratio between 1996 and 2009?
#+end_quote








 
